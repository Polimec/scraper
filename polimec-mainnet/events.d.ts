// Generated by dedot cli

import type {
  GenericChainEvents,
  GenericPalletEvent,
  RpcVersion,
} from "dedot/types";
import type {
  DispatchError,
  AccountId32,
  H256,
  FixedBytes,
  Result,
  Bytes,
  Percent,
  Perbill,
  FixedU128,
} from "dedot/codecs";
import type {
  FrameSystemDispatchEventInfo,
  SpWeightsWeightV2Weight,
  PalletMultisigTimepoint,
  SharedConfigurationProxyType,
  PolimecRuntimeOriginCaller,
  FrameSupportTokensMiscBalanceStatus,
  StagingXcmV4Location,
  StagingXcmV3MultilocationMultiLocation,
  PalletParachainStakingDelegationRequestsCancelledScheduledRequest,
  PalletParachainStakingDelegatorAdded,
  StagingXcmV5TraitsOutcome,
  StagingXcmV5Location,
  StagingXcmV5Xcm,
  StagingXcmV5Response,
  XcmVersionedAssets,
  StagingXcmV5AssetAssets,
  XcmV5TraitsError,
  XcmVersionedLocation,
  CumulusPrimitivesCoreAggregateMessageOrigin,
  FrameSupportMessagesProcessMessageError,
  PalletDemocracyVoteThreshold,
  PalletDemocracyVoteAccountVote,
  PalletDemocracyMetadataOwner,
  PalletFundingStorageProjectMetadata,
  PalletFundingInnerProjectStatus,
  PolimecCommonAssetsAcceptedFundingAsset,
  PalletFundingInnerParticipationMode,
  PalletFundingInnerBidStatus,
  PolkadotParachainPrimitivesPrimitivesId,
  StagingXcmV4Response,
  PolimecCommonMigrationTypesMigrationStatus,
} from "./types.js";

export interface ChainEvents<Rv extends RpcVersion>
  extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<
      Rv,
      "System",
      "ExtrinsicSuccess",
      { dispatchInfo: FrameSystemDispatchEventInfo }
    >;

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      "System",
      "ExtrinsicFailed",
      {
        dispatchError: DispatchError;
        dispatchInfo: FrameSystemDispatchEventInfo;
      }
    >;

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, "System", "CodeUpdated", null>;

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<
      Rv,
      "System",
      "NewAccount",
      { account: AccountId32 }
    >;

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<
      Rv,
      "System",
      "KilledAccount",
      { account: AccountId32 }
    >;

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<
      Rv,
      "System",
      "Remarked",
      { sender: AccountId32; hash: H256 }
    >;

    /**
     * An upgrade was authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<
      Rv,
      "System",
      "UpgradeAuthorized",
      { codeHash: H256; checkVersion: boolean }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ParachainSystem`'s events
   **/
  parachainSystem: {
    /**
     * The validation function has been scheduled to apply.
     **/
    ValidationFunctionStored: GenericPalletEvent<
      Rv,
      "ParachainSystem",
      "ValidationFunctionStored",
      null
    >;

    /**
     * The validation function was applied as of the contained relay chain block number.
     **/
    ValidationFunctionApplied: GenericPalletEvent<
      Rv,
      "ParachainSystem",
      "ValidationFunctionApplied",
      { relayChainBlockNum: number }
    >;

    /**
     * The relay-chain aborted the upgrade process.
     **/
    ValidationFunctionDiscarded: GenericPalletEvent<
      Rv,
      "ParachainSystem",
      "ValidationFunctionDiscarded",
      null
    >;

    /**
     * Some downward messages have been received and will be processed.
     **/
    DownwardMessagesReceived: GenericPalletEvent<
      Rv,
      "ParachainSystem",
      "DownwardMessagesReceived",
      { count: number }
    >;

    /**
     * Downward messages were processed using the given weight.
     **/
    DownwardMessagesProcessed: GenericPalletEvent<
      Rv,
      "ParachainSystem",
      "DownwardMessagesProcessed",
      { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 }
    >;

    /**
     * An upward message was sent to the relay chain.
     **/
    UpwardMessageSent: GenericPalletEvent<
      Rv,
      "ParachainSystem",
      "UpwardMessageSent",
      { messageHash?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<
      Rv,
      "Utility",
      "BatchInterrupted",
      { index: number; error: DispatchError }
    >;

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, "Utility", "BatchCompleted", null>;

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<
      Rv,
      "Utility",
      "BatchCompletedWithErrors",
      null
    >;

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, "Utility", "ItemCompleted", null>;

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<
      Rv,
      "Utility",
      "ItemFailed",
      { error: DispatchError }
    >;

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<
      Rv,
      "Utility",
      "DispatchedAs",
      { result: Result<[], DispatchError> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      "Multisig",
      "NewMultisig",
      {
        approving: AccountId32;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      }
    >;

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      "Multisig",
      "MultisigApproval",
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      }
    >;

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      "Multisig",
      "MultisigExecuted",
      {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      "Multisig",
      "MultisigCancelled",
      {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<
      Rv,
      "Proxy",
      "ProxyExecuted",
      { result: Result<[], DispatchError> }
    >;

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      "Proxy",
      "PureCreated",
      {
        pure: AccountId32;
        who: AccountId32;
        proxyType: SharedConfigurationProxyType;
        disambiguationIndex: number;
      }
    >;

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<
      Rv,
      "Proxy",
      "Announced",
      { real: AccountId32; proxy: AccountId32; callHash: H256 }
    >;

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      "Proxy",
      "ProxyAdded",
      {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: SharedConfigurationProxyType;
        delay: number;
      }
    >;

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      "Proxy",
      "ProxyRemoved",
      {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: SharedConfigurationProxyType;
        delay: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `SkipFeelessPayment`'s events
   **/
  skipFeelessPayment: {
    /**
     * A transaction fee was skipped.
     **/
    FeeSkipped: GenericPalletEvent<
      Rv,
      "SkipFeelessPayment",
      "FeeSkipped",
      { origin: PolimecRuntimeOriginCaller }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<
      Rv,
      "Balances",
      "Endowed",
      { account: AccountId32; freeBalance: bigint }
    >;

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<
      Rv,
      "Balances",
      "DustLost",
      { account: AccountId32; amount: bigint }
    >;

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<
      Rv,
      "Balances",
      "Transfer",
      { from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<
      Rv,
      "Balances",
      "BalanceSet",
      { who: AccountId32; free: bigint }
    >;

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<
      Rv,
      "Balances",
      "Reserved",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<
      Rv,
      "Balances",
      "Unreserved",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      "Balances",
      "ReserveRepatriated",
      {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      }
    >;

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<
      Rv,
      "Balances",
      "Deposit",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<
      Rv,
      "Balances",
      "Withdraw",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<
      Rv,
      "Balances",
      "Slashed",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<
      Rv,
      "Balances",
      "Minted",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<
      Rv,
      "Balances",
      "Burned",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<
      Rv,
      "Balances",
      "Suspended",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<
      Rv,
      "Balances",
      "Restored",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<
      Rv,
      "Balances",
      "Upgraded",
      { who: AccountId32 }
    >;

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, "Balances", "Issued", { amount: bigint }>;

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<
      Rv,
      "Balances",
      "Rescinded",
      { amount: bigint }
    >;

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<
      Rv,
      "Balances",
      "Locked",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<
      Rv,
      "Balances",
      "Unlocked",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<
      Rv,
      "Balances",
      "Frozen",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<
      Rv,
      "Balances",
      "Thawed",
      { who: AccountId32; amount: bigint }
    >;

    /**
     * The `TotalIssuance` was forcefully changed.
     **/
    TotalIssuanceForced: GenericPalletEvent<
      Rv,
      "Balances",
      "TotalIssuanceForced",
      { old: bigint; new: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      "TransactionPayment",
      "TransactionFeePaid",
      { who: AccountId32; actualFee: bigint; tip: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Vesting`'s events
   **/
  vesting: {
    /**
     * The amount vested has been updated. This could indicate a change in funds available.
     * The balance given is the amount which is left unvested (and thus locked).
     **/
    VestingUpdated: GenericPalletEvent<
      Rv,
      "Vesting",
      "VestingUpdated",
      { account: AccountId32; unvested: bigint }
    >;

    /**
     * An \[account\] has become fully vested.
     **/
    VestingCompleted: GenericPalletEvent<
      Rv,
      "Vesting",
      "VestingCompleted",
      { account: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ContributionTokens`'s events
   **/
  contributionTokens: {
    /**
     * Some asset class was created.
     **/
    Created: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Created",
      { assetId: number; creator: AccountId32; owner: AccountId32 }
    >;

    /**
     * Some assets were issued.
     **/
    Issued: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Issued",
      { assetId: number; owner: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Transferred",
      { assetId: number; from: AccountId32; to: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were destroyed.
     **/
    Burned: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Burned",
      { assetId: number; owner: AccountId32; balance: bigint }
    >;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "TeamChanged",
      {
        assetId: number;
        issuer: AccountId32;
        admin: AccountId32;
        freezer: AccountId32;
      }
    >;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "OwnerChanged",
      { assetId: number; owner: AccountId32 }
    >;

    /**
     * Some account `who` was frozen.
     **/
    Frozen: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Frozen",
      { assetId: number; who: AccountId32 }
    >;

    /**
     * Some account `who` was thawed.
     **/
    Thawed: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Thawed",
      { assetId: number; who: AccountId32 }
    >;

    /**
     * Some asset `asset_id` was frozen.
     **/
    AssetFrozen: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "AssetFrozen",
      { assetId: number }
    >;

    /**
     * Some asset `asset_id` was thawed.
     **/
    AssetThawed: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "AssetThawed",
      { assetId: number }
    >;

    /**
     * Accounts were destroyed for given asset.
     **/
    AccountsDestroyed: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "AccountsDestroyed",
      { assetId: number; accountsDestroyed: number; accountsRemaining: number }
    >;

    /**
     * Approvals were destroyed for given asset.
     **/
    ApprovalsDestroyed: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "ApprovalsDestroyed",
      {
        assetId: number;
        approvalsDestroyed: number;
        approvalsRemaining: number;
      }
    >;

    /**
     * An asset class is in the process of being destroyed.
     **/
    DestructionStarted: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "DestructionStarted",
      { assetId: number }
    >;

    /**
     * An asset class was destroyed.
     **/
    Destroyed: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Destroyed",
      { assetId: number }
    >;

    /**
     * Some asset class was force-created.
     **/
    ForceCreated: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "ForceCreated",
      { assetId: number; owner: AccountId32 }
    >;

    /**
     * New metadata has been set for an asset.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "MetadataSet",
      {
        assetId: number;
        name: Bytes;
        symbol: Bytes;
        decimals: number;
        isFrozen: boolean;
      }
    >;

    /**
     * Metadata has been cleared for an asset.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "MetadataCleared",
      { assetId: number }
    >;

    /**
     * (Additional) funds have been approved for transfer to a destination account.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "ApprovedTransfer",
      {
        assetId: number;
        source: AccountId32;
        delegate: AccountId32;
        amount: bigint;
      }
    >;

    /**
     * An approval for account `delegate` was cancelled by `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "ApprovalCancelled",
      { assetId: number; owner: AccountId32; delegate: AccountId32 }
    >;

    /**
     * An `amount` was transferred in its entirety from `owner` to `destination` by
     * the approved `delegate`.
     **/
    TransferredApproved: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "TransferredApproved",
      {
        assetId: number;
        owner: AccountId32;
        delegate: AccountId32;
        destination: AccountId32;
        amount: bigint;
      }
    >;

    /**
     * An asset has had its attributes changed by the `Force` origin.
     **/
    AssetStatusChanged: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "AssetStatusChanged",
      { assetId: number }
    >;

    /**
     * The min_balance of an asset has been updated by the asset owner.
     **/
    AssetMinBalanceChanged: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "AssetMinBalanceChanged",
      { assetId: number; newMinBalance: bigint }
    >;

    /**
     * Some account `who` was created with a deposit from `depositor`.
     **/
    Touched: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Touched",
      { assetId: number; who: AccountId32; depositor: AccountId32 }
    >;

    /**
     * Some account `who` was blocked.
     **/
    Blocked: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Blocked",
      { assetId: number; who: AccountId32 }
    >;

    /**
     * Some assets were deposited (e.g. for transaction fees).
     **/
    Deposited: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Deposited",
      { assetId: number; who: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were withdrawn from the account (e.g. for transaction fees).
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      "ContributionTokens",
      "Withdrawn",
      { assetId: number; who: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ForeignAssets`'s events
   **/
  foreignAssets: {
    /**
     * Some asset class was created.
     **/
    Created: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Created",
      {
        assetId: StagingXcmV4Location;
        creator: AccountId32;
        owner: AccountId32;
      }
    >;

    /**
     * Some assets were issued.
     **/
    Issued: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Issued",
      { assetId: StagingXcmV4Location; owner: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Transferred",
      {
        assetId: StagingXcmV4Location;
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
      }
    >;

    /**
     * Some assets were destroyed.
     **/
    Burned: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Burned",
      { assetId: StagingXcmV4Location; owner: AccountId32; balance: bigint }
    >;

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "TeamChanged",
      {
        assetId: StagingXcmV4Location;
        issuer: AccountId32;
        admin: AccountId32;
        freezer: AccountId32;
      }
    >;

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "OwnerChanged",
      { assetId: StagingXcmV4Location; owner: AccountId32 }
    >;

    /**
     * Some account `who` was frozen.
     **/
    Frozen: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Frozen",
      { assetId: StagingXcmV4Location; who: AccountId32 }
    >;

    /**
     * Some account `who` was thawed.
     **/
    Thawed: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Thawed",
      { assetId: StagingXcmV4Location; who: AccountId32 }
    >;

    /**
     * Some asset `asset_id` was frozen.
     **/
    AssetFrozen: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "AssetFrozen",
      { assetId: StagingXcmV4Location }
    >;

    /**
     * Some asset `asset_id` was thawed.
     **/
    AssetThawed: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "AssetThawed",
      { assetId: StagingXcmV4Location }
    >;

    /**
     * Accounts were destroyed for given asset.
     **/
    AccountsDestroyed: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "AccountsDestroyed",
      {
        assetId: StagingXcmV4Location;
        accountsDestroyed: number;
        accountsRemaining: number;
      }
    >;

    /**
     * Approvals were destroyed for given asset.
     **/
    ApprovalsDestroyed: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "ApprovalsDestroyed",
      {
        assetId: StagingXcmV4Location;
        approvalsDestroyed: number;
        approvalsRemaining: number;
      }
    >;

    /**
     * An asset class is in the process of being destroyed.
     **/
    DestructionStarted: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "DestructionStarted",
      { assetId: StagingXcmV4Location }
    >;

    /**
     * An asset class was destroyed.
     **/
    Destroyed: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Destroyed",
      { assetId: StagingXcmV4Location }
    >;

    /**
     * Some asset class was force-created.
     **/
    ForceCreated: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "ForceCreated",
      { assetId: StagingXcmV4Location; owner: AccountId32 }
    >;

    /**
     * New metadata has been set for an asset.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "MetadataSet",
      {
        assetId: StagingXcmV4Location;
        name: Bytes;
        symbol: Bytes;
        decimals: number;
        isFrozen: boolean;
      }
    >;

    /**
     * Metadata has been cleared for an asset.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "MetadataCleared",
      { assetId: StagingXcmV4Location }
    >;

    /**
     * (Additional) funds have been approved for transfer to a destination account.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "ApprovedTransfer",
      {
        assetId: StagingXcmV4Location;
        source: AccountId32;
        delegate: AccountId32;
        amount: bigint;
      }
    >;

    /**
     * An approval for account `delegate` was cancelled by `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "ApprovalCancelled",
      {
        assetId: StagingXcmV4Location;
        owner: AccountId32;
        delegate: AccountId32;
      }
    >;

    /**
     * An `amount` was transferred in its entirety from `owner` to `destination` by
     * the approved `delegate`.
     **/
    TransferredApproved: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "TransferredApproved",
      {
        assetId: StagingXcmV4Location;
        owner: AccountId32;
        delegate: AccountId32;
        destination: AccountId32;
        amount: bigint;
      }
    >;

    /**
     * An asset has had its attributes changed by the `Force` origin.
     **/
    AssetStatusChanged: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "AssetStatusChanged",
      { assetId: StagingXcmV4Location }
    >;

    /**
     * The min_balance of an asset has been updated by the asset owner.
     **/
    AssetMinBalanceChanged: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "AssetMinBalanceChanged",
      { assetId: StagingXcmV4Location; newMinBalance: bigint }
    >;

    /**
     * Some account `who` was created with a deposit from `depositor`.
     **/
    Touched: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Touched",
      {
        assetId: StagingXcmV4Location;
        who: AccountId32;
        depositor: AccountId32;
      }
    >;

    /**
     * Some account `who` was blocked.
     **/
    Blocked: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Blocked",
      { assetId: StagingXcmV4Location; who: AccountId32 }
    >;

    /**
     * Some assets were deposited (e.g. for transaction fees).
     **/
    Deposited: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Deposited",
      { assetId: StagingXcmV4Location; who: AccountId32; amount: bigint }
    >;

    /**
     * Some assets were withdrawn from the account (e.g. for transaction fees).
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      "ForeignAssets",
      "Withdrawn",
      { assetId: StagingXcmV4Location; who: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Dispenser`'s events
   **/
  dispenser: {
    Dispensed: GenericPalletEvent<
      Rv,
      "Dispenser",
      "Dispensed",
      { dispensedToDid: Bytes; dispensedTo: AccountId32; amount: bigint }
    >;
    DispenseAmountChanged: GenericPalletEvent<
      Rv,
      "Dispenser",
      "DispenseAmountChanged",
      bigint
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `AssetTransactionPayment`'s events
   **/
  assetTransactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who` in an asset `asset_id`.
     **/
    AssetTxFeePaid: GenericPalletEvent<
      Rv,
      "AssetTransactionPayment",
      "AssetTxFeePaid",
      {
        who: AccountId32;
        actualFee: bigint;
        tip: bigint;
        assetId?: StagingXcmV3MultilocationMultiLocation | undefined;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Session`'s events
   **/
  session: {
    /**
     * New session has happened. Note that the argument is the session index, not the
     * block number as the type might suggest.
     **/
    NewSession: GenericPalletEvent<
      Rv,
      "Session",
      "NewSession",
      { sessionIndex: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ParachainStaking`'s events
   **/
  parachainStaking: {
    /**
     * Started new round.
     **/
    NewRound: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "NewRound",
      {
        startingBlock: number;
        round: number;
        selectedCollatorsNumber: number;
        totalBalance: bigint;
      }
    >;

    /**
     * Account joined the set of collator candidates.
     **/
    JoinedCollatorCandidates: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "JoinedCollatorCandidates",
      { account: AccountId32; amountLocked: bigint; newTotalAmtLocked: bigint }
    >;

    /**
     * Candidate selected for collators. Total Exposed Amount includes all delegations.
     **/
    CollatorChosen: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CollatorChosen",
      {
        round: number;
        collatorAccount: AccountId32;
        totalExposedAmount: bigint;
      }
    >;

    /**
     * Candidate requested to decrease a self bond.
     **/
    CandidateBondLessRequested: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CandidateBondLessRequested",
      { candidate: AccountId32; amountToDecrease: bigint; executeRound: number }
    >;

    /**
     * Candidate has increased a self bond.
     **/
    CandidateBondedMore: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CandidateBondedMore",
      { candidate: AccountId32; amount: bigint; newTotalBond: bigint }
    >;

    /**
     * Candidate has decreased a self bond.
     **/
    CandidateBondedLess: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CandidateBondedLess",
      { candidate: AccountId32; amount: bigint; newBond: bigint }
    >;

    /**
     * Candidate temporarily leave the set of collator candidates without unbonding.
     **/
    CandidateWentOffline: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CandidateWentOffline",
      { candidate: AccountId32 }
    >;

    /**
     * Candidate rejoins the set of collator candidates.
     **/
    CandidateBackOnline: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CandidateBackOnline",
      { candidate: AccountId32 }
    >;

    /**
     * Candidate has requested to leave the set of candidates.
     **/
    CandidateScheduledExit: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CandidateScheduledExit",
      {
        exitAllowedRound: number;
        candidate: AccountId32;
        scheduledExit: number;
      }
    >;

    /**
     * Cancelled request to leave the set of candidates.
     **/
    CancelledCandidateExit: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CancelledCandidateExit",
      { candidate: AccountId32 }
    >;

    /**
     * Cancelled request to decrease candidate's bond.
     **/
    CancelledCandidateBondLess: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CancelledCandidateBondLess",
      { candidate: AccountId32; amount: bigint; executeRound: number }
    >;

    /**
     * Candidate has left the set of candidates.
     **/
    CandidateLeft: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CandidateLeft",
      {
        exCandidate: AccountId32;
        unlockedAmount: bigint;
        newTotalAmtLocked: bigint;
      }
    >;

    /**
     * Delegator requested to decrease a bond for the collator candidate.
     **/
    DelegationDecreaseScheduled: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegationDecreaseScheduled",
      {
        delegator: AccountId32;
        candidate: AccountId32;
        amountToDecrease: bigint;
        executeRound: number;
      }
    >;
    DelegationIncreased: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegationIncreased",
      {
        delegator: AccountId32;
        candidate: AccountId32;
        amount: bigint;
        inTop: boolean;
      }
    >;
    DelegationDecreased: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegationDecreased",
      {
        delegator: AccountId32;
        candidate: AccountId32;
        amount: bigint;
        inTop: boolean;
      }
    >;

    /**
     * Delegator requested to leave the set of delegators.
     **/
    DelegatorExitScheduled: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegatorExitScheduled",
      { round: number; delegator: AccountId32; scheduledExit: number }
    >;

    /**
     * Delegator requested to revoke delegation.
     **/
    DelegationRevocationScheduled: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegationRevocationScheduled",
      {
        round: number;
        delegator: AccountId32;
        candidate: AccountId32;
        scheduledExit: number;
      }
    >;

    /**
     * Delegator has left the set of delegators.
     **/
    DelegatorLeft: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegatorLeft",
      { delegator: AccountId32; unstakedAmount: bigint }
    >;

    /**
     * Delegation revoked.
     **/
    DelegationRevoked: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegationRevoked",
      { delegator: AccountId32; candidate: AccountId32; unstakedAmount: bigint }
    >;

    /**
     * Delegation kicked.
     **/
    DelegationKicked: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegationKicked",
      { delegator: AccountId32; candidate: AccountId32; unstakedAmount: bigint }
    >;

    /**
     * Cancelled a pending request to exit the set of delegators.
     **/
    DelegatorExitCancelled: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegatorExitCancelled",
      { delegator: AccountId32 }
    >;

    /**
     * Cancelled request to change an existing delegation.
     **/
    CancelledDelegationRequest: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CancelledDelegationRequest",
      {
        delegator: AccountId32;
        cancelledRequest: PalletParachainStakingDelegationRequestsCancelledScheduledRequest;
        collator: AccountId32;
      }
    >;

    /**
     * New delegation (increase of the existing one).
     **/
    Delegation: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "Delegation",
      {
        delegator: AccountId32;
        lockedAmount: bigint;
        candidate: AccountId32;
        delegatorPosition: PalletParachainStakingDelegatorAdded;
        autoCompound: Percent;
      }
    >;

    /**
     * Delegation from candidate state has been remove.
     **/
    DelegatorLeftCandidate: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "DelegatorLeftCandidate",
      {
        delegator: AccountId32;
        candidate: AccountId32;
        unstakedAmount: bigint;
        totalCandidateStaked: bigint;
      }
    >;

    /**
     * Paid the account (delegator or collator) the balance as liquid rewards.
     **/
    Rewarded: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "Rewarded",
      { account: AccountId32; rewards: bigint }
    >;

    /**
     * Transferred to account which holds funds reserved for parachain bond.
     **/
    ReservedForParachainBond: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "ReservedForParachainBond",
      { account: AccountId32; value: bigint }
    >;

    /**
     * Account (re)set for parachain bond treasury.
     **/
    ParachainBondAccountSet: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "ParachainBondAccountSet",
      { old: AccountId32; new: AccountId32 }
    >;

    /**
     * Percent of inflation reserved for parachain bond (re)set.
     **/
    ParachainBondReservePercentSet: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "ParachainBondReservePercentSet",
      { old: Percent; new: Percent }
    >;

    /**
     * Annual inflation input (first 3) was used to derive new per-round inflation (last 3)
     **/
    InflationSet: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "InflationSet",
      {
        annualMin: Perbill;
        annualIdeal: Perbill;
        annualMax: Perbill;
        roundMin: Perbill;
        roundIdeal: Perbill;
        roundMax: Perbill;
      }
    >;

    /**
     * Staking expectations set.
     **/
    StakeExpectationsSet: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "StakeExpectationsSet",
      { expectMin: bigint; expectIdeal: bigint; expectMax: bigint }
    >;

    /**
     * Set total selected candidates to this value.
     **/
    TotalSelectedSet: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "TotalSelectedSet",
      { old: number; new: number }
    >;

    /**
     * Set collator commission to this value.
     **/
    CollatorCommissionSet: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "CollatorCommissionSet",
      { old: Perbill; new: Perbill }
    >;

    /**
     * Set blocks per round
     **/
    BlocksPerRoundSet: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "BlocksPerRoundSet",
      {
        currentRound: number;
        firstBlock: number;
        old: number;
        new: number;
        newPerRoundInflationMin: Perbill;
        newPerRoundInflationIdeal: Perbill;
        newPerRoundInflationMax: Perbill;
      }
    >;

    /**
     * Auto-compounding reward percent was set for a delegation.
     **/
    AutoCompoundSet: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "AutoCompoundSet",
      { candidate: AccountId32; delegator: AccountId32; value: Percent }
    >;

    /**
     * Compounded a portion of rewards towards the delegation.
     **/
    Compounded: GenericPalletEvent<
      Rv,
      "ParachainStaking",
      "Compounded",
      { candidate: AccountId32; delegator: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `XcmpQueue`'s events
   **/
  xcmpQueue: {
    /**
     * An HRMP message was sent to a sibling parachain.
     **/
    XcmpMessageSent: GenericPalletEvent<
      Rv,
      "XcmpQueue",
      "XcmpMessageSent",
      { messageHash: FixedBytes<32> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `PolkadotXcm`'s events
   **/
  polkadotXcm: {
    /**
     * Execution of an XCM message was attempted.
     **/
    Attempted: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "Attempted",
      { outcome: StagingXcmV5TraitsOutcome }
    >;

    /**
     * A XCM message was sent.
     **/
    Sent: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "Sent",
      {
        origin: StagingXcmV5Location;
        destination: StagingXcmV5Location;
        message: StagingXcmV5Xcm;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * Query response received which does not match a registered query. This may be because a
     * matching query was never registered, it may be because it is a duplicate response, or
     * because the query timed out.
     **/
    UnexpectedResponse: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "UnexpectedResponse",
      { origin: StagingXcmV5Location; queryId: bigint }
    >;

    /**
     * Query response has been received and is ready for taking with `take_response`. There is
     * no registered notification call.
     **/
    ResponseReady: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "ResponseReady",
      { queryId: bigint; response: StagingXcmV5Response }
    >;

    /**
     * Query response has been received and query is removed. The registered notification has
     * been dispatched and executed successfully.
     **/
    Notified: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "Notified",
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The registered notification
     * could not be dispatched because the dispatch weight is greater than the maximum weight
     * originally budgeted by this runtime for the query result.
     **/
    NotifyOverweight: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "NotifyOverweight",
      {
        queryId: bigint;
        palletIndex: number;
        callIndex: number;
        actualWeight: SpWeightsWeightV2Weight;
        maxBudgetedWeight: SpWeightsWeightV2Weight;
      }
    >;

    /**
     * Query response has been received and query is removed. There was a general error with
     * dispatching the notification call.
     **/
    NotifyDispatchError: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "NotifyDispatchError",
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Query response has been received and query is removed. The dispatch was unable to be
     * decoded into a `Call`; this might be due to dispatch function having a signature which
     * is not `(origin, QueryId, Response)`.
     **/
    NotifyDecodeFailed: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "NotifyDecodeFailed",
      { queryId: bigint; palletIndex: number; callIndex: number }
    >;

    /**
     * Expected query response has been received but the origin location of the response does
     * not match that expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidResponder: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "InvalidResponder",
      {
        origin: StagingXcmV5Location;
        queryId: bigint;
        expectedLocation?: StagingXcmV5Location | undefined;
      }
    >;

    /**
     * Expected query response has been received but the expected origin location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidResponderVersion: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "InvalidResponderVersion",
      { origin: StagingXcmV5Location; queryId: bigint }
    >;

    /**
     * Received query response has been read and removed.
     **/
    ResponseTaken: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "ResponseTaken",
      { queryId: bigint }
    >;

    /**
     * Some assets have been placed in an asset trap.
     **/
    AssetsTrapped: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "AssetsTrapped",
      { hash: H256; origin: StagingXcmV5Location; assets: XcmVersionedAssets }
    >;

    /**
     * An XCM version change notification message has been attempted to be sent.
     *
     * The cost of sending it (borne by the chain) is included.
     **/
    VersionChangeNotified: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "VersionChangeNotified",
      {
        destination: StagingXcmV5Location;
        result: number;
        cost: StagingXcmV5AssetAssets;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * The supported version of a location has been changed. This might be through an
     * automatic notification or a manual intervention.
     **/
    SupportedVersionChanged: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "SupportedVersionChanged",
      { location: StagingXcmV5Location; version: number }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * sending the notification to it.
     **/
    NotifyTargetSendFail: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "NotifyTargetSendFail",
      {
        location: StagingXcmV5Location;
        queryId: bigint;
        error: XcmV5TraitsError;
      }
    >;

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * migrating the location to our new XCM format.
     **/
    NotifyTargetMigrationFail: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "NotifyTargetMigrationFail",
      { location: XcmVersionedLocation; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the expected querier location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidQuerierVersion: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "InvalidQuerierVersion",
      { origin: StagingXcmV5Location; queryId: bigint }
    >;

    /**
     * Expected query response has been received but the querier location of the response does
     * not match the expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidQuerier: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "InvalidQuerier",
      {
        origin: StagingXcmV5Location;
        queryId: bigint;
        expectedQuerier: StagingXcmV5Location;
        maybeActualQuerier?: StagingXcmV5Location | undefined;
      }
    >;

    /**
     * A remote has requested XCM version change notification from us and we have honored it.
     * A version information message is sent to them and its cost is included.
     **/
    VersionNotifyStarted: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "VersionNotifyStarted",
      {
        destination: StagingXcmV5Location;
        cost: StagingXcmV5AssetAssets;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * We have requested that a remote chain send us XCM version change notifications.
     **/
    VersionNotifyRequested: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "VersionNotifyRequested",
      {
        destination: StagingXcmV5Location;
        cost: StagingXcmV5AssetAssets;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * We have requested that a remote chain stops sending us XCM version change
     * notifications.
     **/
    VersionNotifyUnrequested: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "VersionNotifyUnrequested",
      {
        destination: StagingXcmV5Location;
        cost: StagingXcmV5AssetAssets;
        messageId: FixedBytes<32>;
      }
    >;

    /**
     * Fees were paid from a location for an operation (often for using `SendXcm`).
     **/
    FeesPaid: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "FeesPaid",
      { paying: StagingXcmV5Location; fees: StagingXcmV5AssetAssets }
    >;

    /**
     * Some assets have been claimed from an asset trap
     **/
    AssetsClaimed: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "AssetsClaimed",
      { hash: H256; origin: StagingXcmV5Location; assets: XcmVersionedAssets }
    >;

    /**
     * A XCM version migration finished.
     **/
    VersionMigrationFinished: GenericPalletEvent<
      Rv,
      "PolkadotXcm",
      "VersionMigrationFinished",
      { version: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `CumulusXcm`'s events
   **/
  cumulusXcm: {
    /**
     * Downward message is invalid XCM.
     * \[ id \]
     **/
    InvalidFormat: GenericPalletEvent<
      Rv,
      "CumulusXcm",
      "InvalidFormat",
      FixedBytes<32>
    >;

    /**
     * Downward message is unsupported version of XCM.
     * \[ id \]
     **/
    UnsupportedVersion: GenericPalletEvent<
      Rv,
      "CumulusXcm",
      "UnsupportedVersion",
      FixedBytes<32>
    >;

    /**
     * Downward message executed with the given outcome.
     * \[ id, outcome \]
     **/
    ExecutedDownward: GenericPalletEvent<
      Rv,
      "CumulusXcm",
      "ExecutedDownward",
      [FixedBytes<32>, StagingXcmV5TraitsOutcome]
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `MessageQueue`'s events
   **/
  messageQueue: {
    /**
     * Message discarded due to an error in the `MessageProcessor` (usually a format error).
     **/
    ProcessingFailed: GenericPalletEvent<
      Rv,
      "MessageQueue",
      "ProcessingFailed",
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The error that occurred.
         *
         * This error is pretty opaque. More fine-grained errors need to be emitted as events
         * by the `MessageProcessor`.
         **/
        error: FrameSupportMessagesProcessMessageError;
      }
    >;

    /**
     * Message is processed.
     **/
    Processed: GenericPalletEvent<
      Rv,
      "MessageQueue",
      "Processed",
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: H256;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * How much weight was used to process the message.
         **/
        weightUsed: SpWeightsWeightV2Weight;

        /**
         * Whether the message was processed.
         *
         * Note that this does not mean that the underlying `MessageProcessor` was internally
         * successful. It *solely* means that the MQ pallet will treat this as a success
         * condition and discard the message. Any internal error needs to be emitted as events
         * by the `MessageProcessor`.
         **/
        success: boolean;
      }
    >;

    /**
     * Message placed in overweight queue.
     **/
    OverweightEnqueued: GenericPalletEvent<
      Rv,
      "MessageQueue",
      "OverweightEnqueued",
      {
        /**
         * The `blake2_256` hash of the message.
         **/
        id: FixedBytes<32>;

        /**
         * The queue of the message.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The page of the message.
         **/
        pageIndex: number;

        /**
         * The index of the message within the page.
         **/
        messageIndex: number;
      }
    >;

    /**
     * This page was reaped.
     **/
    PageReaped: GenericPalletEvent<
      Rv,
      "MessageQueue",
      "PageReaped",
      {
        /**
         * The queue of the page.
         **/
        origin: CumulusPrimitivesCoreAggregateMessageOrigin;

        /**
         * The index of the page.
         **/
        index: number;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Treasury`'s events
   **/
  treasury: {
    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<
      Rv,
      "Treasury",
      "Spending",
      { budgetRemaining: bigint }
    >;

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      "Treasury",
      "Awarded",
      { proposalIndex: number; award: bigint; account: AccountId32 }
    >;

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, "Treasury", "Burnt", { burntFunds: bigint }>;

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<
      Rv,
      "Treasury",
      "Rollover",
      { rolloverBalance: bigint }
    >;

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, "Treasury", "Deposit", { value: bigint }>;

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      "Treasury",
      "SpendApproved",
      { proposalIndex: number; amount: bigint; beneficiary: AccountId32 }
    >;

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<
      Rv,
      "Treasury",
      "UpdatedInactive",
      { reactivated: bigint; deactivated: bigint }
    >;

    /**
     * A new asset spend proposal has been approved.
     **/
    AssetSpendApproved: GenericPalletEvent<
      Rv,
      "Treasury",
      "AssetSpendApproved",
      {
        index: number;
        assetKind: [];
        amount: bigint;
        beneficiary: AccountId32;
        validFrom: number;
        expireAt: number;
      }
    >;

    /**
     * An approved spend was voided.
     **/
    AssetSpendVoided: GenericPalletEvent<
      Rv,
      "Treasury",
      "AssetSpendVoided",
      { index: number }
    >;

    /**
     * A payment happened.
     **/
    Paid: GenericPalletEvent<
      Rv,
      "Treasury",
      "Paid",
      { index: number; paymentId: [] }
    >;

    /**
     * A payment failed and can be retried.
     **/
    PaymentFailed: GenericPalletEvent<
      Rv,
      "Treasury",
      "PaymentFailed",
      { index: number; paymentId: [] }
    >;

    /**
     * A spend was processed and removed from the storage. It might have been successfully
     * paid or it may have expired.
     **/
    SpendProcessed: GenericPalletEvent<
      Rv,
      "Treasury",
      "SpendProcessed",
      { index: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Democracy`'s events
   **/
  democracy: {
    /**
     * A motion has been proposed by a public account.
     **/
    Proposed: GenericPalletEvent<
      Rv,
      "Democracy",
      "Proposed",
      { proposalIndex: number; deposit: bigint }
    >;

    /**
     * A public proposal has been tabled for referendum vote.
     **/
    Tabled: GenericPalletEvent<
      Rv,
      "Democracy",
      "Tabled",
      { proposalIndex: number; deposit: bigint }
    >;

    /**
     * An external proposal has been tabled.
     **/
    ExternalTabled: GenericPalletEvent<Rv, "Democracy", "ExternalTabled", null>;

    /**
     * A referendum has begun.
     **/
    Started: GenericPalletEvent<
      Rv,
      "Democracy",
      "Started",
      { refIndex: number; threshold: PalletDemocracyVoteThreshold }
    >;

    /**
     * A proposal has been approved by referendum.
     **/
    Passed: GenericPalletEvent<Rv, "Democracy", "Passed", { refIndex: number }>;

    /**
     * A proposal has been rejected by referendum.
     **/
    NotPassed: GenericPalletEvent<
      Rv,
      "Democracy",
      "NotPassed",
      { refIndex: number }
    >;

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<
      Rv,
      "Democracy",
      "Cancelled",
      { refIndex: number }
    >;

    /**
     * An account has delegated their vote to another account.
     **/
    Delegated: GenericPalletEvent<
      Rv,
      "Democracy",
      "Delegated",
      { who: AccountId32; target: AccountId32 }
    >;

    /**
     * An account has cancelled a previous delegation operation.
     **/
    Undelegated: GenericPalletEvent<
      Rv,
      "Democracy",
      "Undelegated",
      { account: AccountId32 }
    >;

    /**
     * An external proposal has been vetoed.
     **/
    Vetoed: GenericPalletEvent<
      Rv,
      "Democracy",
      "Vetoed",
      { who: AccountId32; proposalHash: H256; until: number }
    >;

    /**
     * A proposal_hash has been blacklisted permanently.
     **/
    Blacklisted: GenericPalletEvent<
      Rv,
      "Democracy",
      "Blacklisted",
      { proposalHash: H256 }
    >;

    /**
     * An account has voted in a referendum
     **/
    Voted: GenericPalletEvent<
      Rv,
      "Democracy",
      "Voted",
      {
        voter: AccountId32;
        refIndex: number;
        vote: PalletDemocracyVoteAccountVote;
      }
    >;

    /**
     * An account has secconded a proposal
     **/
    Seconded: GenericPalletEvent<
      Rv,
      "Democracy",
      "Seconded",
      { seconder: AccountId32; propIndex: number }
    >;

    /**
     * A proposal got canceled.
     **/
    ProposalCanceled: GenericPalletEvent<
      Rv,
      "Democracy",
      "ProposalCanceled",
      { propIndex: number }
    >;

    /**
     * Metadata for a proposal or a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      "Democracy",
      "MetadataSet",
      {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata for a proposal or a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      "Democracy",
      "MetadataCleared",
      {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Metadata has been transferred to new owner.
     **/
    MetadataTransferred: GenericPalletEvent<
      Rv,
      "Democracy",
      "MetadataTransferred",
      {
        /**
         * Previous metadata owner.
         **/
        prevOwner: PalletDemocracyMetadataOwner;

        /**
         * New metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner;

        /**
         * Preimage hash.
         **/
        hash: H256;
      }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Council`'s events
   **/
  council: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      "Council",
      "Proposed",
      {
        account: AccountId32;
        proposalIndex: number;
        proposalHash: H256;
        threshold: number;
      }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      "Council",
      "Voted",
      {
        account: AccountId32;
        proposalHash: H256;
        voted: boolean;
        yes: number;
        no: number;
      }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<
      Rv,
      "Council",
      "Approved",
      { proposalHash: H256 }
    >;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<
      Rv,
      "Council",
      "Disapproved",
      { proposalHash: H256 }
    >;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      "Council",
      "Executed",
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      "Council",
      "MemberExecuted",
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<
      Rv,
      "Council",
      "Closed",
      { proposalHash: H256; yes: number; no: number }
    >;

    /**
     * A proposal was killed.
     **/
    Killed: GenericPalletEvent<Rv, "Council", "Killed", { proposalHash: H256 }>;

    /**
     * Some cost for storing a proposal was burned.
     **/
    ProposalCostBurned: GenericPalletEvent<
      Rv,
      "Council",
      "ProposalCostBurned",
      { proposalHash: H256; who: AccountId32 }
    >;

    /**
     * Some cost for storing a proposal was released.
     **/
    ProposalCostReleased: GenericPalletEvent<
      Rv,
      "Council",
      "ProposalCostReleased",
      { proposalHash: H256; who: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `TechnicalCommittee`'s events
   **/
  technicalCommittee: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Proposed",
      {
        account: AccountId32;
        proposalIndex: number;
        proposalHash: H256;
        threshold: number;
      }
    >;

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Voted",
      {
        account: AccountId32;
        proposalHash: H256;
        voted: boolean;
        yes: number;
        no: number;
      }
    >;

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Approved",
      { proposalHash: H256 }
    >;

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Disapproved",
      { proposalHash: H256 }
    >;

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Executed",
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "MemberExecuted",
      { proposalHash: H256; result: Result<[], DispatchError> }
    >;

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Closed",
      { proposalHash: H256; yes: number; no: number }
    >;

    /**
     * A proposal was killed.
     **/
    Killed: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "Killed",
      { proposalHash: H256 }
    >;

    /**
     * Some cost for storing a proposal was burned.
     **/
    ProposalCostBurned: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "ProposalCostBurned",
      { proposalHash: H256; who: AccountId32 }
    >;

    /**
     * Some cost for storing a proposal was released.
     **/
    ProposalCostReleased: GenericPalletEvent<
      Rv,
      "TechnicalCommittee",
      "ProposalCostReleased",
      { proposalHash: H256; who: AccountId32 }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Elections`'s events
   **/
  elections: {
    /**
     * A new term with new_members. This indicates that enough candidates existed to run
     * the election, not that enough have has been elected. The inner value must be examined
     * for this purpose. A `NewTerm(\[\])` indicates that some candidates got their bond
     * slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to
     * begin with.
     **/
    NewTerm: GenericPalletEvent<
      Rv,
      "Elections",
      "NewTerm",
      { newMembers: Array<[AccountId32, bigint]> }
    >;

    /**
     * No (or not enough) candidates existed for this round. This is different from
     * `NewTerm(\[\])`. See the description of `NewTerm`.
     **/
    EmptyTerm: GenericPalletEvent<Rv, "Elections", "EmptyTerm", null>;

    /**
     * Internal error happened while trying to perform election.
     **/
    ElectionError: GenericPalletEvent<Rv, "Elections", "ElectionError", null>;

    /**
     * A member has been removed. This should always be followed by either `NewTerm` or
     * `EmptyTerm`.
     **/
    MemberKicked: GenericPalletEvent<
      Rv,
      "Elections",
      "MemberKicked",
      { member: AccountId32 }
    >;

    /**
     * Someone has renounced their candidacy.
     **/
    Renounced: GenericPalletEvent<
      Rv,
      "Elections",
      "Renounced",
      { candidate: AccountId32 }
    >;

    /**
     * A candidate was slashed by amount due to failing to obtain a seat as member or
     * runner-up.
     *
     * Note that old members and runners-up are also candidates.
     **/
    CandidateSlashed: GenericPalletEvent<
      Rv,
      "Elections",
      "CandidateSlashed",
      { candidate: AccountId32; amount: bigint }
    >;

    /**
     * A seat holder was slashed by amount by being forcefully removed from the set.
     **/
    SeatHolderSlashed: GenericPalletEvent<
      Rv,
      "Elections",
      "SeatHolderSlashed",
      { seatHolder: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, "Preimage", "Noted", { hash: H256 }>;

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, "Preimage", "Requested", { hash: H256 }>;

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, "Preimage", "Cleared", { hash: H256 }>;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<
      Rv,
      "Scheduler",
      "Scheduled",
      { when: number; index: number }
    >;

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<
      Rv,
      "Scheduler",
      "Canceled",
      { when: number; index: number }
    >;

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      "Scheduler",
      "Dispatched",
      {
        task: [number, number];
        id?: FixedBytes<32> | undefined;
        result: Result<[], DispatchError>;
      }
    >;

    /**
     * Set a retry configuration for some task.
     **/
    RetrySet: GenericPalletEvent<
      Rv,
      "Scheduler",
      "RetrySet",
      {
        task: [number, number];
        id?: FixedBytes<32> | undefined;
        period: number;
        retries: number;
      }
    >;

    /**
     * Cancel a retry configuration for some task.
     **/
    RetryCancelled: GenericPalletEvent<
      Rv,
      "Scheduler",
      "RetryCancelled",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      "Scheduler",
      "CallUnavailable",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      "Scheduler",
      "PeriodicFailed",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task was unable to be retried since the agenda is full at that block or there
     * was not enough weight to reschedule it.
     **/
    RetryFailed: GenericPalletEvent<
      Rv,
      "Scheduler",
      "RetryFailed",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      "Scheduler",
      "PermanentlyOverweight",
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Oracle`'s events
   **/
  oracle: {
    /**
     * New feed data is submitted.
     **/
    NewFeedData: GenericPalletEvent<
      Rv,
      "Oracle",
      "NewFeedData",
      { sender: AccountId32; values: Array<[StagingXcmV4Location, FixedU128]> }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `OracleProvidersMembership`'s events
   **/
  oracleProvidersMembership: {
    /**
     * The given member was added; see the transaction for who.
     **/
    MemberAdded: GenericPalletEvent<
      Rv,
      "OracleProvidersMembership",
      "MemberAdded",
      undefined
    >;

    /**
     * The given member was removed; see the transaction for who.
     **/
    MemberRemoved: GenericPalletEvent<
      Rv,
      "OracleProvidersMembership",
      "MemberRemoved",
      undefined
    >;

    /**
     * Two members were swapped; see the transaction for who.
     **/
    MembersSwapped: GenericPalletEvent<
      Rv,
      "OracleProvidersMembership",
      "MembersSwapped",
      undefined
    >;

    /**
     * The membership was reset; see the transaction for who the new set is.
     **/
    MembersReset: GenericPalletEvent<
      Rv,
      "OracleProvidersMembership",
      "MembersReset",
      undefined
    >;

    /**
     * One of the members' keys changed.
     **/
    KeyChanged: GenericPalletEvent<
      Rv,
      "OracleProvidersMembership",
      "KeyChanged",
      undefined
    >;

    /**
     * Phantom member, never used.
     **/
    Dummy: GenericPalletEvent<
      Rv,
      "OracleProvidersMembership",
      "Dummy",
      undefined
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `OracleOffchainWorker`'s events
   **/
  oracleOffchainWorker: {
    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `Funding`'s events
   **/
  funding: {
    /**
     * A project was created.
     **/
    ProjectCreated: GenericPalletEvent<
      Rv,
      "Funding",
      "ProjectCreated",
      {
        projectId: number;
        issuer: AccountId32;
        metadata: PalletFundingStorageProjectMetadata;
      }
    >;

    /**
     * An issuer removed the project before the evaluation started
     **/
    ProjectRemoved: GenericPalletEvent<
      Rv,
      "Funding",
      "ProjectRemoved",
      { projectId: number; issuer: AccountId32 }
    >;

    /**
     * The metadata of a project was modified.
     **/
    MetadataEdited: GenericPalletEvent<
      Rv,
      "Funding",
      "MetadataEdited",
      { projectId: number; metadata: PalletFundingStorageProjectMetadata }
    >;

    /**
     * Project transitioned to a new phase.
     **/
    ProjectPhaseTransition: GenericPalletEvent<
      Rv,
      "Funding",
      "ProjectPhaseTransition",
      { projectId: number; phase: PalletFundingInnerProjectStatus }
    >;

    /**
     * A `bonder` bonded an `amount` of PLMC for `project_id`.
     **/
    Evaluation: GenericPalletEvent<
      Rv,
      "Funding",
      "Evaluation",
      {
        projectId: number;
        evaluator: AccountId32;
        id: number;
        plmcAmount: bigint;
      }
    >;

    /**
     * A bid was made for a project
     **/
    Bid: GenericPalletEvent<
      Rv,
      "Funding",
      "Bid",
      {
        projectId: number;
        bidder: AccountId32;
        id: number;
        ctAmount: bigint;
        ctPrice: FixedU128;
        fundingAsset: PolimecCommonAssetsAcceptedFundingAsset;
        fundingAmount: bigint;
        plmcBond: bigint;
        mode: PalletFundingInnerParticipationMode;
      }
    >;

    /**
     * An oversubscribed bid has been marked as rejected, and can now be settled early and release the funds back to the user.
     **/
    OversubscribedBidProcessed: GenericPalletEvent<
      Rv,
      "Funding",
      "OversubscribedBidProcessed",
      { projectId: number; bidId: number }
    >;

    /**
     * An evaluation was settled. PLMC has been unbonded with either a CT reward or a PLMC slash depending on the project outcome.
     **/
    EvaluationSettled: GenericPalletEvent<
      Rv,
      "Funding",
      "EvaluationSettled",
      {
        projectId: number;
        account: AccountId32;
        id: number;
        ctRewarded: bigint;
        plmcReleased: bigint;
      }
    >;

    /**
     * A bid was settled. On Funding Success the PLMC has been unbonded/locked with a vesting schedule and the funding assets have been transferred to the issuer.
     * Some funds and PLMC might have been returned to the bidder if they paid a higher price than the final CT price.
     * If Funding Failed, the PLMC has been unbonded and the funds have been returned to the bidder.
     **/
    BidSettled: GenericPalletEvent<
      Rv,
      "Funding",
      "BidSettled",
      {
        projectId: number;
        account: AccountId32;
        id: number;
        status: PalletFundingInnerBidStatus;
        finalCtAmount: bigint;
      }
    >;

    /**
     * Issuer started the CT migration to mainnet tokens using the pallet migration method
     **/
    PalletMigrationStarted: GenericPalletEvent<
      Rv,
      "Funding",
      "PalletMigrationStarted",
      { projectId: number; paraId: PolkadotParachainPrimitivesPrimitivesId }
    >;

    /**
     * A channel was accepted from a parachain to Polimec belonging to a project. A request has been sent to the relay for a Polimec->project channel
     **/
    HrmpChannelAccepted: GenericPalletEvent<
      Rv,
      "Funding",
      "HrmpChannelAccepted",
      { projectId: number; paraId: PolkadotParachainPrimitivesPrimitivesId }
    >;

    /**
     * A channel was established from Polimec to a project. The relay has notified us of their acceptance of our request
     **/
    HrmpChannelEstablished: GenericPalletEvent<
      Rv,
      "Funding",
      "HrmpChannelEstablished",
      { projectId: number; paraId: PolkadotParachainPrimitivesPrimitivesId }
    >;

    /**
     * Started a migration readiness check
     **/
    MigrationReadinessCheckStarted: GenericPalletEvent<
      Rv,
      "Funding",
      "MigrationReadinessCheckStarted",
      { projectId: number; caller: AccountId32 }
    >;

    /**
     * Migration readiness check was accepted
     **/
    MigrationCheckResponseAccepted: GenericPalletEvent<
      Rv,
      "Funding",
      "MigrationCheckResponseAccepted",
      { projectId: number; queryId: bigint; response: StagingXcmV4Response }
    >;

    /**
     * Migration readiness check was rejected
     **/
    MigrationCheckResponseRejected: GenericPalletEvent<
      Rv,
      "Funding",
      "MigrationCheckResponseRejected",
      { projectId: number; queryId: bigint; response: StagingXcmV4Response }
    >;

    /**
     * A user's CT migrations status was updated
     **/
    MigrationStatusUpdated: GenericPalletEvent<
      Rv,
      "Funding",
      "MigrationStatusUpdated",
      {
        projectId: number;
        account: AccountId32;
        status: PolimecCommonMigrationTypesMigrationStatus;
      }
    >;

    /**
     * The CT migration of a project has been completed. All CTs were converted to mainnet tokens.
     **/
    CtMigrationFinished: GenericPalletEvent<
      Rv,
      "Funding",
      "CTMigrationFinished",
      { projectId: number }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `LinearRelease`'s events
   **/
  linearRelease: {
    /**
     * The amount vested has been updated. This could indicate a change in funds available.
     * The balance given is the amount which is left unvested (and thus locked).
     **/
    VestingUpdated: GenericPalletEvent<
      Rv,
      "LinearRelease",
      "VestingUpdated",
      { account: AccountId32; unvested: bigint }
    >;

    /**
     * An `account` has become fully vested.
     **/
    VestingCompleted: GenericPalletEvent<
      Rv,
      "LinearRelease",
      "VestingCompleted",
      { account: AccountId32 }
    >;
    VestingTransferred: GenericPalletEvent<
      Rv,
      "LinearRelease",
      "VestingTransferred",
      { to: AccountId32; amount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
  /**
   * Pallet `ProxyBonding`'s events
   **/
  proxyBonding: {
    BondsTransferredBackToTreasury: GenericPalletEvent<
      Rv,
      "ProxyBonding",
      "BondsTransferredBackToTreasury",
      { bondAmount: bigint }
    >;
    FeesTransferredToFeeRecipient: GenericPalletEvent<
      Rv,
      "ProxyBonding",
      "FeesTransferredToFeeRecipient",
      { feeAsset: StagingXcmV4Location; feeAmount: bigint }
    >;

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>;
  };
}
