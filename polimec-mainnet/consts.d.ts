// Generated by dedot cli

import type { GenericChainConsts, RpcVersion } from "dedot/types";
import type {
  RuntimeVersion,
  FixedBytes,
  Permill,
  AccountId32,
  Percent,
  Perbill,
} from "dedot/codecs";
import type {
  FrameSystemLimitsBlockWeights,
  FrameSystemLimitsBlockLength,
  SpWeightsRuntimeDbWeight,
  PolkadotParachainPrimitivesPrimitivesId,
  FrameSupportPalletId,
  SpWeightsWeightV2Weight,
  StagingXcmV4Location,
} from "./types.js";

export interface ChainConsts<Rv extends RpcVersion>
  extends GenericChainConsts<Rv> {
  /**
   * Pallet `System`'s constants
   **/
  system: {
    /**
     * Block & extrinsics weights: base values and limits.
     **/
    blockWeights: FrameSystemLimitsBlockWeights;

    /**
     * The maximum length of a block (in bytes).
     **/
    blockLength: FrameSystemLimitsBlockLength;

    /**
     * Maximum number of block number to block hash mappings to keep (oldest pruned first).
     **/
    blockHashCount: number;

    /**
     * The weight of runtime database operations the runtime can invoke.
     **/
    dbWeight: SpWeightsRuntimeDbWeight;

    /**
     * Get the chain's in-code version.
     **/
    version: RuntimeVersion;

    /**
     * The designated SS58 prefix of this chain.
     *
     * This replaces the "ss58Format" property declared in the chain spec. Reason is
     * that the runtime should know about the prefix in order to make use of it as
     * an identifier of the chain.
     **/
    ss58Prefix: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ParachainSystem`'s constants
   **/
  parachainSystem: {
    /**
     * Returns the parachain ID we are running with.
     **/
    selfParaId: PolkadotParachainPrimitivesPrimitivesId;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Timestamp`'s constants
   **/
  timestamp: {
    /**
     * The minimum period between blocks.
     *
     * Be aware that this is different to the *expected* period that the block production
     * apparatus provides. Your chosen consensus system will generally work with this to
     * determine a sensible block time. For example, in the Aura pallet it will be double this
     * period on default settings.
     **/
    minimumPeriod: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ParachainInfo`'s constants
   **/
  parachainInfo: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Utility`'s constants
   **/
  utility: {
    /**
     * The limit on the number of batched calls.
     **/
    batchedCallsLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Multisig`'s constants
   **/
  multisig: {
    /**
     * The base amount of currency needed to reserve for creating a multisig execution or to
     * store a dispatch call for later.
     *
     * This is held for an additional storage item whose value size is
     * `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is
     * `32 + sizeof(AccountId)` bytes.
     **/
    depositBase: bigint;

    /**
     * The amount of currency needed per unit threshold when creating a multisig execution.
     *
     * This is held for adding 32 bytes more into a pre-existing storage value.
     **/
    depositFactor: bigint;

    /**
     * The maximum amount of signatories allowed in the multisig.
     **/
    maxSignatories: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Proxy`'s constants
   **/
  proxy: {
    /**
     * The base amount of currency needed to reserve for creating a proxy.
     *
     * This is held for an additional storage item whose value size is
     * `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes.
     **/
    proxyDepositBase: bigint;

    /**
     * The amount of currency needed per proxy added.
     *
     * This is held for adding 32 bytes plus an instance of `ProxyType` more into a
     * pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take
     * into account `32 + proxy_type.encode().len()` bytes of data.
     **/
    proxyDepositFactor: bigint;

    /**
     * The maximum amount of proxies allowed for a single account.
     **/
    maxProxies: number;

    /**
     * The maximum amount of time-delayed announcements that are allowed to be pending.
     **/
    maxPending: number;

    /**
     * The base amount of currency needed to reserve for creating an announcement.
     *
     * This is held when a new storage item holding a `Balance` is created (typically 16
     * bytes).
     **/
    announcementDepositBase: bigint;

    /**
     * The amount of currency needed per announcement made.
     *
     * This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)
     * into a pre-existing storage value.
     **/
    announcementDepositFactor: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `SkipFeelessPayment`'s constants
   **/
  skipFeelessPayment: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Balances`'s constants
   **/
  balances: {
    /**
     * The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!
     *
     * If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for
     * this pallet. However, you do so at your own risk: this will open up a major DoS vector.
     * In case you have multiple sources of provider references, you may also get unexpected
     * behaviour if you set this to zero.
     *
     * Bottom line: Do yourself a favour and make it at least one!
     **/
    existentialDeposit: bigint;

    /**
     * The maximum number of locks that should exist on an account.
     * Not strictly enforced, but used for weight estimation.
     *
     * Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`
     **/
    maxLocks: number;

    /**
     * The maximum number of named reserves that can exist on an account.
     *
     * Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`
     **/
    maxReserves: number;

    /**
     * The maximum number of individual freeze locks that can exist on an account at any time.
     **/
    maxFreezes: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `TransactionPayment`'s constants
   **/
  transactionPayment: {
    /**
     * A fee multiplier for `Operational` extrinsics to compute "virtual tip" to boost their
     * `priority`
     *
     * This value is multiplied by the `final_fee` to obtain a "virtual tip" that is later
     * added to a tip component in regular `priority` calculations.
     * It means that a `Normal` transaction can front-run a similarly-sized `Operational`
     * extrinsic (with no tip), by including a tip value greater than the virtual tip.
     *
     * ```rust,ignore
     * // For `Normal`
     * let priority = priority_calc(tip);
     *
     * // For `Operational`
     * let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;
     * let priority = priority_calc(tip + virtual_tip);
     * ```
     *
     * Note that since we use `final_fee` the multiplier applies also to the regular `tip`
     * sent with the transaction. So, not only does the transaction get a priority bump based
     * on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`
     * transactions.
     **/
    operationalFeeMultiplier: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Vesting`'s constants
   **/
  vesting: {
    /**
     * The minimum amount transferred to call `vested_transfer`.
     **/
    minVestedTransfer: bigint;
    maxVestingSchedules: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ContributionTokens`'s constants
   **/
  contributionTokens: {
    /**
     * Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.
     *
     * Must be configured to result in a weight that makes each call fit in a block.
     **/
    removeItemsLimit: number;

    /**
     * The basic amount of funds that must be reserved for an asset.
     **/
    assetDeposit: bigint;

    /**
     * The amount of funds that must be reserved for a non-provider asset account to be
     * maintained.
     **/
    assetAccountDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved when adding metadata to your asset.
     **/
    metadataDepositBase: bigint;

    /**
     * The additional funds that must be reserved for the number of bytes you store in your
     * metadata.
     **/
    metadataDepositPerByte: bigint;

    /**
     * The amount of funds that must be reserved when creating a new approval.
     **/
    approvalDeposit: bigint;

    /**
     * The maximum length of a name or symbol stored on-chain.
     **/
    stringLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ForeignAssets`'s constants
   **/
  foreignAssets: {
    /**
     * Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.
     *
     * Must be configured to result in a weight that makes each call fit in a block.
     **/
    removeItemsLimit: number;

    /**
     * The basic amount of funds that must be reserved for an asset.
     **/
    assetDeposit: bigint;

    /**
     * The amount of funds that must be reserved for a non-provider asset account to be
     * maintained.
     **/
    assetAccountDeposit: bigint;

    /**
     * The basic amount of funds that must be reserved when adding metadata to your asset.
     **/
    metadataDepositBase: bigint;

    /**
     * The additional funds that must be reserved for the number of bytes you store in your
     * metadata.
     **/
    metadataDepositPerByte: bigint;

    /**
     * The amount of funds that must be reserved when creating a new approval.
     **/
    approvalDeposit: bigint;

    /**
     * The maximum length of a name or symbol stored on-chain.
     **/
    stringLimit: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Dispenser`'s constants
   **/
  dispenser: {
    /**
     * The amount of dispensed tokens that are free, so they could be used to pay for
     * future transaction fees.
     **/
    freeDispenseAmount: bigint;

    /**
     * The amount of tokens that are initially dispensed from the dispenser.
     **/
    initialDispenseAmount: bigint;

    /**
     * The period of time that the dispensed funds are locked. Used to calculate the
     * starting block of the vesting schedule.
     **/
    lockPeriod: number;

    /**
     * The dispenser's pallet id, used for deriving its sovereign account ID.
     **/
    palletId: FrameSupportPalletId;

    /**
     * The period of time that the dispensed funds are in a vesting schedule. The schedule
     * starts after the lock period.
     **/
    vestPeriod: number;

    /**
     * The Ed25519 Verifier Public Key to verify the signature of the credentials.
     **/
    verifierPublicKey: FixedBytes<32>;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AssetTransactionPayment`'s constants
   **/
  assetTransactionPayment: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Authorship`'s constants
   **/
  authorship: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Session`'s constants
   **/
  session: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Aura`'s constants
   **/
  aura: {
    /**
     * The slot duration Aura should run with, expressed in milliseconds.
     * The effective value of this type should not change while the chain is running.
     *
     * For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const.
     **/
    slotDuration: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `AuraExt`'s constants
   **/
  auraExt: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ParachainStaking`'s constants
   **/
  parachainStaking: {
    /**
     * Minimum number of blocks per round
     **/
    minBlocksPerRound: number;

    /**
     * Number of rounds that candidates remain bonded before exit request is executable
     **/
    leaveCandidatesDelay: number;

    /**
     * Number of rounds candidate requests to decrease self-bond must wait to be executable
     **/
    candidateBondLessDelay: number;

    /**
     * Number of rounds that delegators remain bonded before exit request is executable
     **/
    leaveDelegatorsDelay: number;

    /**
     * Number of rounds that delegations remain bonded before revocation request is executable
     **/
    revokeDelegationDelay: number;

    /**
     * Number of rounds that delegation less requests must wait before executable
     **/
    delegationBondLessDelay: number;

    /**
     * Number of rounds after which block authors are rewarded
     **/
    rewardPaymentDelay: number;

    /**
     * Minimum number of selected candidates every round
     **/
    minSelectedCandidates: number;

    /**
     * Maximum top delegations counted per candidate
     **/
    maxTopDelegationsPerCandidate: number;

    /**
     * Maximum bottom delegations (not counted) per candidate
     **/
    maxBottomDelegationsPerCandidate: number;

    /**
     * Maximum delegations per delegator
     **/
    maxDelegationsPerDelegator: number;

    /**
     * Minimum stake required for any account to be a collator candidate
     **/
    minCandidateStk: bigint;

    /**
     * Minimum stake for any registered on-chain account to delegate
     **/
    minDelegation: bigint;

    /**
     * Minimum stake for any registered on-chain account to be a delegator
     **/
    minDelegatorStk: bigint;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `XcmpQueue`'s constants
   **/
  xcmpQueue: {
    /**
     * The maximum number of inbound XCMP channels that can be suspended simultaneously.
     *
     * Any further channel suspensions will fail and messages may get dropped without further
     * notice. Choosing a high value (1000) is okay; the trade-off that is described in
     * [`InboundXcmpSuspended`] still applies at that scale.
     **/
    maxInboundSuspended: number;

    /**
     * Maximal number of outbound XCMP channels that can have messages queued at the same time.
     *
     * If this is reached, then no further messages can be sent to channels that do not yet
     * have a message queued. This should be set to the expected maximum of outbound channels
     * which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,
     * since otherwise the congestion control protocol will not work as intended and messages
     * may be dropped. This value increases the PoV and should therefore not be picked too
     * high. Governance needs to pay attention to not open more channels than this value.
     **/
    maxActiveOutboundChannels: number;

    /**
     * The maximal page size for HRMP message pages.
     *
     * A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case
     * benchmarking. The limit for the size of a message is slightly below this, since some
     * overhead is incurred for encoding the format.
     **/
    maxPageSize: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `PolkadotXcm`'s constants
   **/
  polkadotXcm: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `CumulusXcm`'s constants
   **/
  cumulusXcm: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `MessageQueue`'s constants
   **/
  messageQueue: {
    /**
     * The size of the page; this implies the maximum message size which can be sent.
     *
     * A good value depends on the expected message sizes, their weights, the weight that is
     * available for processing them and the maximal needed message size. The maximal message
     * size is slightly lower than this as defined by [`MaxMessageLenOf`].
     **/
    heapSize: number;

    /**
     * The maximum number of stale pages (i.e. of overweight messages) allowed before culling
     * can happen. Once there are more stale pages than this, then historical pages may be
     * dropped, even if they contain unprocessed overweight messages.
     **/
    maxStale: number;

    /**
     * The amount of weight (if any) which should be provided to the message queue for
     * servicing enqueued items `on_initialize`.
     *
     * This may be legitimately `None` in the case that you will call
     * `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have
     * it run in `on_idle`.
     **/
    serviceWeight: SpWeightsWeightV2Weight | undefined;

    /**
     * The maximum amount of weight (if any) to be used from remaining weight `on_idle` which
     * should be provided to the message queue for servicing enqueued items `on_idle`.
     * Useful for parachains to process messages at the same block they are received.
     *
     * If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`.
     **/
    idleMaxServiceWeight: SpWeightsWeightV2Weight | undefined;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Treasury`'s constants
   **/
  treasury: {
    /**
     * Period between successive spends.
     **/
    spendPeriod: number;

    /**
     * Percentage of spare funds (if any) that are burnt per spend period.
     **/
    burn: Permill;

    /**
     * The treasury's pallet id, used for deriving its sovereign account ID.
     **/
    palletId: FrameSupportPalletId;

    /**
     * DEPRECATED: associated with `spend_local` call and will be removed in May 2025.
     * Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.
     *
     * The maximum number of approvals that can wait in the spending queue.
     *
     * NOTE: This parameter is also used within the Bounties Pallet extension if enabled.
     **/
    maxApprovals: number;

    /**
     * The period during which an approved treasury spend has to be claimed.
     **/
    payoutPeriod: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Democracy`'s constants
   **/
  democracy: {
    /**
     * The period between a proposal being approved and enacted.
     *
     * It should generally be a little more than the unstake period to ensure that
     * voting stakers have an opportunity to remove themselves from the system in the case
     * where they are on the losing side of a vote.
     **/
    enactmentPeriod: number;

    /**
     * How often (in blocks) new public referenda are launched.
     **/
    launchPeriod: number;

    /**
     * How often (in blocks) to check for new votes.
     **/
    votingPeriod: number;

    /**
     * The minimum period of vote locking.
     *
     * It should be no shorter than enactment period to ensure that in the case of an approval,
     * those successful voters are locked into the consequences that their votes entail.
     **/
    voteLockingPeriod: number;

    /**
     * The minimum amount to be used as a deposit for a public referendum proposal.
     **/
    minimumDeposit: bigint;

    /**
     * Indicator for whether an emergency origin is even allowed to happen. Some chains may
     * want to set this permanently to `false`, others may want to condition it on things such
     * as an upgrade having happened recently.
     **/
    instantAllowed: boolean;

    /**
     * Minimum voting period allowed for a fast-track referendum.
     **/
    fastTrackVotingPeriod: number;

    /**
     * Period in blocks where an external proposal may not be re-submitted after being vetoed.
     **/
    cooloffPeriod: number;

    /**
     * The maximum number of votes for an account.
     *
     * Also used to compute weight, an overly big value can
     * lead to extrinsic with very big weight: see `delegate` for instance.
     **/
    maxVotes: number;

    /**
     * The maximum number of public proposals that can exist at any time.
     **/
    maxProposals: number;

    /**
     * The maximum number of deposits a public proposal may have at any time.
     **/
    maxDeposits: number;

    /**
     * The maximum number of items which can be blacklisted.
     **/
    maxBlacklisted: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Council`'s constants
   **/
  council: {
    /**
     * The maximum weight of a dispatch call that can be proposed and executed.
     **/
    maxProposalWeight: SpWeightsWeightV2Weight;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `TechnicalCommittee`'s constants
   **/
  technicalCommittee: {
    /**
     * The maximum weight of a dispatch call that can be proposed and executed.
     **/
    maxProposalWeight: SpWeightsWeightV2Weight;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Elections`'s constants
   **/
  elections: {
    /**
     * How much should be locked up in order to submit one's candidacy.
     **/
    candidacyBond: bigint;

    /**
     * Number of members to elect.
     **/
    desiredMembers: number;

    /**
     * Number of runners_up to keep.
     **/
    desiredRunnersUp: number;

    /**
     * How long each seat is kept. This defines the next block number at which an election
     * round will happen. If set to zero, no elections are ever triggered and the module will
     * be in passive mode.
     **/
    termDuration: number;

    /**
     * How long the voting lock is in effect after voting or changing vote. If set to
     * zero, no lock is enforced.
     **/
    votingLockPeriod: number;

    /**
     * The maximum number of candidates in a phragmen election.
     *
     * Warning: This impacts the size of the election which is run onchain. Chose wisely, and
     * consider how it will impact `T::WeightInfo::election_phragmen`.
     *
     * When this limit is reached no more candidates are accepted in the election.
     **/
    maxCandidates: number;

    /**
     * The maximum number of voters to allow in a phragmen election.
     *
     * Warning: This impacts the size of the election which is run onchain. Chose wisely, and
     * consider how it will impact `T::WeightInfo::election_phragmen`.
     *
     * When the limit is reached the new voters are ignored.
     **/
    maxVoters: number;

    /**
     * Maximum numbers of votes per voter.
     *
     * Warning: This impacts the size of the election which is run onchain. Chose wisely, and
     * consider how it will impact `T::WeightInfo::election_phragmen`.
     **/
    maxVotesPerVoter: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Preimage`'s constants
   **/
  preimage: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Scheduler`'s constants
   **/
  scheduler: {
    /**
     * The maximum weight that may be scheduled per block for any dispatchables.
     **/
    maximumWeight: SpWeightsWeightV2Weight;

    /**
     * The maximum number of scheduled calls in the queue for a single block.
     *
     * NOTE:
     * + Dependent pallets' benchmarks might require a higher limit for the setting. Set a
     * higher limit under `runtime-benchmarks` feature.
     **/
    maxScheduledPerBlock: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Oracle`'s constants
   **/
  oracle: {
    /**
     * The root operator account id, record all sudo feeds on this account.
     **/
    rootOperatorAccountId: AccountId32;

    /**
     * Maximum size of HasDispatched
     **/
    maxHasDispatchedSize: number;

    /**
     * Maximum size the vector used for feed values
     **/
    maxFeedValues: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `OracleProvidersMembership`'s constants
   **/
  oracleProvidersMembership: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `OracleOffchainWorker`'s constants
   **/
  oracleOffchainWorker: {
    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `Funding`'s constants
   **/
  funding: {
    /**
     * The length (expressed in number of blocks) of the Auction Round.
     **/
    auctionRoundDuration: number;

    /**
     * The length (expressed in number of blocks) of the evaluation period.
     **/
    evaluationRoundDuration: number;

    /**
     * What percentage of the target funding amount is required to be reached in the evaluation, for it to continue to the funding round.
     **/
    evaluationSuccessThreshold: Percent;

    /**
     * How much an evaluation should be slashed if it the project doesn't reach a certain theshold of funding.
     **/
    evaluatorSlash: Percent;

    /**
     * The fee brackets for the project's funding
     **/
    feeBrackets: Array<[Percent, bigint]>;
    minUsdPerEvaluation: bigint;

    /**
     * System account for the funding pallet. Used to derive project escrow accounts.
     **/
    palletId: FrameSupportPalletId;

    /**
     * The maximum length of data stored on-chain.
     **/
    stringLimit: number;

    /**
     * Account that receive the PLMC slashed from failed evaluations.
     **/
    blockchainOperationTreasury: AccountId32;

    /**
     * Treasury account holding the CT fees charged to issuers.
     **/
    contributionTreasury: AccountId32;

    /**
     * The Ed25519 Verifier Public Key of credential JWTs
     **/
    verifierPublicKey: FixedBytes<32>;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `LinearRelease`'s constants
   **/
  linearRelease: {
    /**
     * The minimum amount transferred to call `vested_transfer`.
     **/
    minVestedTransfer: bigint;
    maxVestingSchedules: number;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
  /**
   * Pallet `ProxyBonding`'s constants
   **/
  proxyBonding: {
    /**
     * The number of decimals one unit of the bonding token has. Used to calculate decimal aware prices.
     **/
    bondingTokenDecimals: number;

    /**
     * The number of decimals one unit of USD has. Used to calculate decimal aware prices. USD is not a real asset, but a reference point.
     **/
    usdDecimals: number;

    /**
     * The id of the bonding token. Used to get the price of the bonding token.
     **/
    bondingTokenId: StagingXcmV4Location;

    /**
     * The percentage of the bonded amount in USD that will be taken as a fee in the fee asset.
     **/
    feePercentage: Perbill;

    /**
     * The account holding the tokens to be bonded. Normally the treasury
     **/
    treasury: AccountId32;

    /**
     * The account receiving the fees
     **/
    feeRecipient: AccountId32;

    /**
     * Generic pallet constant
     **/
    [name: string]: any;
  };
}
